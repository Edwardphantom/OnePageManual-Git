Onepage manual do GIT - Em Caso de Pânico, use o "Q" para sair de telas sem saída!

git
            init                    [inicializa monitoramento do git para o diretório]
            log                     [Exibe os ultimos eventos no projeto - o *Q* sai do log!!!]
            log --author="Edu"      [Exibe as modificações de autores que tenham "Edu" no nome]
            log --decorate          [Exibe info adicional, como mudança de Branch]
            log --graph             [Exibe a Famosa Timeline de eventos]
            tag -a numerodaversao   [Define o numero da versão]
            tag -m "notadatag"      [Define o comentário a ser associado a tag]
            stash                   [Reserva todas alterações e disponibiliza o estado anterior a última mudança detectada]
            stash list              [Mostra todas as versões reservadas no stash]
            stash apply             [Aplica as mudanças reservadas dentro stash]
            stash clear             [Limpa todas as reservas criadas]
            shortlog                [Versão curtinha e simplificada]
            shortlog -sn            [Exibe somente o numero de contribuições de cada autor]
            show *INSIRA_A_HASTAG*  [Exibe tudo que houve naquele commit em específico]
            diff                    [Mostra as diferenças entre as versões dos arquivos]
            diff --name-only        [Mostra somente quais arquivos foram alterados]
            status                  [Mostra alterações e situação atual do desenvolvimento]
            add *                   [Adiciona todos os arquivos ao staged, que é o proximo commit ]
            commit -m "msg"         [Cria o staged, Entre as aspas fica a mensagem personalizada]
            commit -am "msg"        [stagged de tudo, mas arquivos untracked são ignorados]
            branch                  [lista os branchs disponíveis]
            branch -D nomedobranch  [Elimina o branch citado, note que é um "D" maiúsculo]
            checkout nomedoarquivo  [Restaura um arquivo a sua edição anterior]
            checkout nomedobranch   [muda para o branch selecionado]
            checkout -b "novonome"  [Cria um novo branch e alterna pra ele]
            merge nomedobranch      [mescla os branchs faça de dentro do branch principal]
            rebase nomedobranch     [mescla o branch destruindo o histórico de ramificações , faça de dentro do branch principal]
            reset HEAD              [Retira do stagged arquivos que estejam prontos pro commit]
            reset --soft            [Reverte o commit, mas mantém todo mundo em stagged]
            reset --mixed           [Reverte como o soft, e remove do stagged, indo pra modified]
            reset --hard            [Reverte de maneira bruta, ignorando totalmente o commit]

git config
            --global user.name "Jhon Doe"                   [Seta o nome do usuário]
            --global user.email "Jhon@doe.com"              [Seta o E-mail do usuário]
            --global core.editor kate                       [Seta o Editor Padrão de texto]
            --global init.defaultBranch Desenvolvimento     [Seta o nome padrão do branch inicial ]
            --global alias.x  comandoaserassociado          [Associa um comando a uma unica letra encurtando a digitação]
            --list                                          [Mostra Tudo]
git config
            user.name   [Mostra o nome de usuário]
            user.email  [Mostra o e-mail]
git remote
            -v                                                          [Verbose, Exibe mais informações do que *Sem o -v*]
            add insira_um_nome git@github.com:username/reponame.git     [Adiciona o repositório no github ao seu projeto inicializado]
git push
            --tags                                                      [Envia as tags criadas]
            nomedobranchlocal nomedobranchremoto                        [Envia tudo que o commit tiver preparado]
            -u branchlocal branchremoto                                 ["Empurra" pro repositório, sendo os  criado no add + branch no repo]


LifeCycle/Status do arquivo :
Untracked   : existe, mas o Git não sabe
unmodified  : existe pro git, mas não teve alterações
Modified    : o Arquivo agora tem modificações
staged      : o arquivo está marcado para Envio no Commit

* Após o Commit, todos voltam a ser unmodified.
* O Rebase elimina os branchs, sem usar novos commits, mas destrói a ordem e o historico
* O Merge elimina os branchs, mas usa novos commits, e mantém a ordem e o histórico
* No arquivo .gitignore em cada linha você especifica um nome de arquivo ou extensão específica para serem ignorados pela detecção do git
